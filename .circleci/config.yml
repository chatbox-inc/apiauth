version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/php:7.2.5-apache-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment:
          APP_ENV: circleci
          APP_DEBUG: true
          DB_CONNECTION: sqlite
          CACHE_DRIVER: file
          QUEUE_DRIVER: sync
          MAIL_DRIVER: array
    working_directory: ~/laravel # directory where steps will run
    steps: # a set of executable commands
      - checkout # special step to check out source code to working directory
      - run: sudo apt install -y libsqlite3-dev zlib1g-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo composer self-update
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.json" }}
            - composer-v1-
      - run: composer install
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.json" }}
          paths:
            - vendor
#      - restore_cache: # special step to restore the dependency cache if `package.json` does not change
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: npm install
#      - save_cache: # special step to save the dependency cache with the `package.json` cache key template
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules
      - run: touch database/database.sqlite
      - run: php artisan migrate
      - run: ./vendor/bin/phpunit test
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples